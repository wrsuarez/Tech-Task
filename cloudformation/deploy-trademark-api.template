{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "Deploys lambda functions, API Gateway, DynamoDB table, buckets with associated roles",
  "Parameters": {
    "LambdaFunctionZipFileS3Bucket": {
      "Description": "The S3 Bucket Name where the Lambda Function Zip File is stored",
      "Type": "String"
    },
    "LambdaFunctionZipFileS3Key": {
      "Description": "The S3 Object Key (name) of the Lambda Function Zip File in the bucket",
      "Type": "String",
      "Default" : "process_file.zip"
    },
    "KeywordsTextFileName": {
      "Description": "The name of the Keywords text file to use for scanning the documents",
      "Type": "String",
      "Default": "Keywords.txt"
    }
  },
  "Resources": {
    "KeywordTextFileBucket": {
      "Type": "AWS::S3::Bucket"
    },
    "OutputBucket": {
      "Type": "AWS::S3::Bucket"
    },
    "TrackingTable": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "AttributeDefinitions": [
          {
            "AttributeName": "outputid",
            "AttributeType": "S"
          },
          {
            "AttributeName": "timestamp",
            "AttributeType": "S"
          }
        ],
        "KeySchema": [
          {
            "AttributeName": "outputid",
            "KeyType": "HASH"
          },
          {
            "AttributeName": "timestamp",
            "KeyType": "RANGE"
          }
        ],
        "ProvisionedThroughput": {
          "ReadCapacityUnits": 1,
          "WriteCapacityUnits": 1
        }
      }
    },
    "LambdaIAMRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        }
      }
    },
    "LambdaIAMPolicy": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
{
            "Action": [
                "dynamodb:PutItem"
            ],
            "Resource": {"Fn::GetAtt": ["TrackingTable","Arn"]},
            "Effect": "Allow",
            "Sid": "Policy1"
        },
        {
            "Action": [
                "*"
            ],
            "Resource": {"Fn::GetAtt": ["OutputBucket","Arn"]},
            "Effect": "Allow",
            "Sid": "Policy2"
        },
        {
            "Action": [
                "*"
            ],
            "Resource": {"Fn::Join" : ["",[{"Fn::GetAtt": ["OutputBucket","Arn"]},"/*"]]},
            "Effect": "Allow",
            "Sid": "Policy3"
        },
        {
            "Action": [
                "s3:Get*",
                "s3:Head*"
            ],
            "Resource": {"Fn::Join": ["",[{"Fn::GetAtt": ["KeywordTextFileBucket","Arn"]},"/*"]]},
            "Effect": "Allow",
            "Sid": "Policy4"
        },
        {
            "Effect": "Allow",
            "Action": [
                "logs:CreateLogGroup",
                "logs:CreateLogStream",
                "logs:PutLogEvents"
            ],
            "Resource": "*",
            "Sid": "Policy5"
        }
          ]
        },
        "PolicyName": "trademarklambdaiampolicy",
        "Roles": [{
          "Ref": "LambdaIAMRole"
        }]
      }
    },
    "LambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "LambdaFunctionZipFileS3Bucket"
          },
          "S3Key": {
            "Ref": "LambdaFunctionZipFileS3Key"
          }
        },
        "Environment": {
          "Variables": {
            "KEYWORD_TEXT_BUCKET": {
              "Ref": "KeywordTextFileBucket"
            },
            "KEYWORD_TEXT_KEY": {
              "Ref": "KeywordsTextFileName"
            },
            "OUTPUT_BUCKET": {
              "Ref": "OutputBucket"
            },
            "TRACKING_DYNAMO_TABLE": {
              "Ref": "TrackingTable"
            }
          }
        },
        "Handler": "process_file.lambda_handler",
        "Role": {
          "Fn::GetAtt": [
            "LambdaIAMRole",
            "Arn"
          ]
        },
        "Runtime": "python2.7",
        "Timeout": 300
      }
    },
    "APIGatewayAccount": {
      "Type": "AWS::ApiGateway::Account",
      "DependsOn" : "APIGatewayIAMRole",
      "Properties": {
        "CloudWatchRoleArn": {
          "Fn::GetAtt": [
            "APIGatewayIAMRole",
            "Arn"
          ]
        }
      }
    },
    "APIGatewayIAMRole": {
  "Type": "AWS::IAM::Role",
  "Properties": {
    "AssumeRolePolicyDocument": {
      "Version": "2012-10-17",
      "Statement": [{
        "Effect": "Allow",
        "Principal": { "Service": ["apigateway.amazonaws.com"] },
        "Action": ["sts:AssumeRole"]
      }]
    },
    "Policies": [{
      "PolicyName": "ApiGatewayLogsPolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [{
          "Effect": "Allow",
          "Action": [
            "logs:CreateLogGroup",
            "logs:CreateLogStream",
            "logs:DescribeLogGroups",
            "logs:DescribeLogStreams",
            "logs:PutLogEvents",
            "logs:GetLogEvents",
            "logs:FilterLogEvents"
          ],
          "Resource": "*"
        }]
      }
    }]
  }
    },
    "APIGatewayRestApi": {
      "Type": "AWS::ApiGateway::RestApi",
      "Properties": {
        "ApiKeySourceType": "HEADER",
        "BinaryMediaTypes": [
          "multipart/form-data"
        ],
        "Name": "trademarker"
      }
    },
    "ApiGatewayResource": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "APIGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "scanrequest",
        "RestApiId": {
          "Ref": "APIGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethod": {
      "Type": "AWS::ApiGateway::Method",
      "DependsOn": "LambdaPermission",
      "Properties": {
        "ApiKeyRequired": false,
        "AuthorizationType" : "NONE",
        "HttpMethod": "POST",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Uri": {
            "Fn::Join" : ["",
        ["arn:aws:apigateway:", {"Ref": "AWS::Region"}, ":lambda:path/2015-03-31/functions/", {"Fn::GetAtt": ["LambdaFunction", "Arn"]}, "/invocations"]
      ]
          },
          "Type": "AWS",
          "IntegrationResponses": [
            {
              "StatusCode": 200
            }
          ],
          "PassthroughBehavior" : "WHEN_NO_TEMPLATES",
          "RequestTemplates": {
            "multipart/form-data": {
              "Fn::Join": [
                "",
                [
                  "##  See http://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-mapping-template-reference.html\n",
                  "##  This template will pass through all parameters including path, querystring, header, stage variables, and context through to the integration endpoint via the body/payload\n",
                  "#set($allParams = $input.params())\n",
                  "{\n",
                  "\"body-json\" : $input.json('$'),\n",
                  "\"params\" : {\n",
                  "#foreach($type in $allParams.keySet())\n",
                  "#set($params = $allParams.get($type))\n",
                  "\"$type\" : {\n",
                  "#foreach($paramName in $params.keySet())\n",
                  "\"$paramName\" : \"$util.escapeJavaScript($params.get($paramName))\"\n",
                  "#if($foreach.hasNext),#end\n",
                  "#end\n",
                  "}\n",
                  "#if($foreach.hasNext),#end\n",
                  "#end\n",
                  "},\n",
                  "\"stage-variables\" : {\n",
                  "#foreach($key in $stageVariables.keySet())\n",
                  "\"$key\" : \"$util.escapeJavaScript($stageVariables.get($key))\"\n",
                  "#if($foreach.hasNext),#end\n",
                  "#end\n",
                  "},\n",
                  "\"context\" : {\n",
                  "\"account-id\" : \"$context.identity.accountId\",\n",
                  "\"api-id\" : \"$context.apiId\",\n",
                  "\"api-key\" : \"$context.identity.apiKey\",\n",
                  "\"authorizer-principal-id\" : \"$context.authorizer.principalId\",\n",
                  "\"caller\" : \"$context.identity.caller\",\n",
                  "\"cognito-authentication-provider\" : \"$context.identity.cognitoAuthenticationProvider\",\n",
                  "\"cognito-authentication-type\" : \"$context.identity.cognitoAuthenticationType\",\n",
                  "\"cognito-identity-id\" : \"$context.identity.cognitoIdentityId\",\n",
                  "\"cognito-identity-pool-id\" : \"$context.identity.cognitoIdentityPoolId\",\n",
                  "\"http-method\" : \"$context.httpMethod\",\n",
                  "\"stage\" : \"$context.stage\",\n",
                  "\"source-ip\" : \"$context.identity.sourceIp\",\n",
                  "\"user\" : \"$context.identity.user\",\n",
                  "\"user-agent\" : \"$context.identity.userAgent\",\n",
                  "\"user-arn\" : \"$context.identity.userArn\",\n",
                  "\"request-id\" : \"$context.requestId\",\n",
                  "\"resource-id\" : \"$context.resourceId\",\n",
                  "\"resource-path\" : \"$context.resourcePath\"\n",
                  "}\n",
                  "}"
                ]
              ]
            }
          }
        },
        "ResourceId": {
          "Ref": "ApiGatewayResource"
        },
        "RestApiId": {
          "Ref": "APIGatewayRestApi"
        },
        "MethodResponses": [
          {
            "StatusCode": 200
          }
        ]
      }
    },
    "LambdaPermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:invokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "LambdaFunction",
            "Arn"
          ]
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:aws:execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "APIGatewayRestApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "APIGatewayDeployment": {
      "Type": "AWS::ApiGateway::Deployment",
      "DependsOn": "ApiGatewayMethod",
      "Properties": {
        "RestApiId": {
          "Ref": "APIGatewayRestApi"
        },
        "StageName": "HoldingStage"
      }
    },
    "APIGatewayStage": {
      "Type": "AWS::ApiGateway::Stage",
      "DependsOn": "APIGatewayAccount",
      "Properties": {
        "DeploymentId": {
          "Ref": "APIGatewayDeployment"
        },
        "MethodSettings": [
          {
            "DataTraceEnabled": true,
            "HttpMethod": "*",
            "LoggingLevel": "INFO",
            "ResourcePath": "/*"
          }
        ],
        "RestApiId": {
          "Ref": "APIGatewayRestApi"
        },
        "StageName": "LATEST"
      }
    }
  }
}